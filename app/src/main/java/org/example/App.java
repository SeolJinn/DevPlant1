/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import com.google.api.core.ApiFuture;
import com.google.auth.oauth2.GoogleCredentials;
import com.google.cloud.firestore.DocumentSnapshot;
import com.google.cloud.firestore.Firestore;
import com.google.cloud.firestore.WriteResult;
import com.google.cloud.storage.Acl;
import com.google.firebase.FirebaseApp;
import com.google.firebase.FirebaseOptions;
import com.google.firebase.cloud.FirestoreClient;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.*;
import java.io.*;


public class App {
    public static void main(String[] args) throws IOException, ExecutionException, InterruptedException {
        FileInputStream serviceAccount = new FileInputStream("src/serviceAccountKey.json");
        System.out.println("path to serviceAccountKey.json: " + new File("src/serviceAccountKey.json").getAbsolutePath());

        FirebaseOptions options = new FirebaseOptions.Builder()
                .setCredentials(GoogleCredentials.fromStream(serviceAccount))
                .setDatabaseUrl("https://devplant-ec64a-default-rtdb.europe-west1.firebasedatabase.app")
                .build();

        FirebaseApp.initializeApp(options);
        Firestore db =  FirestoreClient.getFirestore();

//        App getQuote = new App();
//        HashMap<String,String> quote = getQuote.getQuoteFromHTTP();
//        ApiFuture<WriteResult> future = db.collection("sampleData").document("Inspiration").set(quote);
//        System.out.println("Successfully updated document: " + future.get().getUpdateTime());
//
//        //USE DOCX ON Qiew_overview
        DOCX docx = new DOCX();
        //Create a list to store the keys
        ArrayList<String> keys = new ArrayList<>();
        //Get the keys from the DOCX file
        keys = (ArrayList<String>) docx.getKeys("src/intrare.docx");

        //Create another ArrayList to store the values
        ArrayList<String> replacements = new ArrayList<>();
        replacements.add("ROL");
        replacements.add("Qiew");
        replacements.add("Qiew");
        replacements.add("Qiew");

        //Create a HashMap to store the keys and values
        HashMap<String, String> map = new HashMap<>();
        for (int i = 0; i < keys.size(); i++) {
            map.put(keys.get(i), replacements.get(i));
        }
        //Print the keys and values
        //System.out.println(map);

        //Replace the keys with the values
        docx.replaceKeys("src/intrare.docx", map);

        //Read the docx file into a string
        String content = docx.readDocxContent("src/intrare.docx");
        //System.out.println(content);

        //Store it into database
        App getQuote = new App();
        HashMap<String,String> quote = getQuote.getQuoteFromHTTP("intrare", content);
        ApiFuture<WriteResult> future = db.collection("sampleData").document("Test").set(quote);
        System.out.println("Successfully updated document: " + future.get().getUpdateTime());

        //read from database
        ApiFuture<DocumentSnapshot> future2 = db.collection("sampleData").document("Test").get();
        DocumentSnapshot document = future2.get();
        if (document.exists()) {
            System.out.println("Document data: " + document.getData());
        } else {
            System.out.println("No such document!");
        }
    }

    public HashMap<String,String> getQuoteFromHTTP(String DOCName, String Content) throws IOException {
        HashMap<String,String> quote = new HashMap<>();
        quote.put("Nume", DOCName);
        quote.put("Continut", Content);
        return quote;
    }
}